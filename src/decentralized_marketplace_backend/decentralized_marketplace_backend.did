type Error = variant {
  FieldEmpty : record { msg : text };
  Sold : record { msg : text };
  NotFound : record { msg : text };
  UserNotRegistered : record { msg : text };
  Unauthorized : record { msg : text };
  UserExists : record { msg : text };
};
type Item = record {
  id : nat64;
  name : text;
  sold : bool;
  description : text;
  principal_id : principal;
  amount : nat64;
};
type NewItem = record { name : text; description : text; amount : nat64 };
type NewUser = record { username : text; role : UserRole; email : text };
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : Item; Err : Error };
type Result_2 = variant { Ok : User; Err : Error };
type User = record {
  id : nat64;
  username : text;
  role : UserRole;
  email : text;
  principal_id : principal;
};
type UserRole = variant { Empty; Buyer; Seller };
service : {
  delete_item : (nat64) -> (Result);
  get_sellers_and_items : () -> (
      vec record { text; text; principal; vec Item },
    ) query;
  list_item : (NewItem) -> (Result_1);
  register_user : (NewUser) -> (Result_2);
  return_items : () -> (vec Item) query;
  update_item : (nat64, text, text, nat64) -> (Result);
}
